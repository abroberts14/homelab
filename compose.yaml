
networks:
  coolify:
    external: true

services:
  watchtower:
    image: ghcr.io/nicholas-fedor/watchtower:latest   # same image is also pushed as nickfedor/watchtower
    container_name: watchtower
    # Pull new images through the VPN like the rest of the stack
    network_mode: "service:gluetun"
    depends_on:
      - gluetun
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro   # let Watchtower talk to the Docker daemon
    environment:
      - TZ=${TZ}                       # reuse the timezone you already export
      - WATCHTOWER_CLEANUP=true        # delete old images after upgrade
      - WATCHTOWER_SCHEDULE=0 0 4 * * *  # run daily at 04:00 local time (cron syntax)
      # OPTIONAL – notifications
      # - WATCHTOWER_NOTIFICATIONS=shoutrrr
      # - WATCHTOWER_NOTIFICATION_URL=ntfy://YOUR_TOPIC
    restart: unless-stopped
  swag:
    image: lscr.io/linuxserver/swag
    container_name: swag
    network_mode: "service:gluetun"

    cap_add:
      - NET_ADMIN
    environment:
      - PUID
      - PGID
      - TZ
      - URL
      - SUBDOMAINS
      - VALIDATION
      - DNSPLUGIN
      - CERTPROVIDER
      - SWAG_AUTORELOAD
      - DUCKDNSTOKEN
      - EMAIL

    volumes:
      - '/docker/appdata/swag:/config'
    restart: unless-stopped
    depends_on:
      - qbittorrent
      - radarr
      - sonarr
      - prowlarr
      - tautulli
      - overseerr
      - channels-dvr
      - uptime-kuma
      - calibre-web-automated
      - lazylibrarian
      - gluetun
    labels:
      - "com.centurylinklabs.watchtower.enable=false"

  gluetun:
    container_name: gluetun
    image: qmcgaw/gluetun
    hostname: gluetun
    networks:
      - coolify  # Uses the same network as Gluetun   
    cap_add:
      - NET_ADMIN
    devices:
      - '/dev/net/tun:/dev/net/tun'
    environment:
      - FIREWALL_INPUT_PORTS
      - FIREWALL_OUTBOUND_SUBNETS
      - VPN_SERVICE_PROVIDER
      - VPN_TYPE
      - WIREGUARD_PRIVATE_KEY
      - SERVER_COUNTRIES
      - TZ
      - DNS
      - DNS_BIND_IP
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    ports:
      - '443:443' #swag  
      - '80:80' #swag  
      - '8989:8989' #other
      - '7878:7878' #radarr
      - '9696:9696' #sonarrr
      - '8181:8181'
      - '5055:5055'
      - '6881:6881'
      - '8080:8080'
      - '5299:5299'  #lazylib
      - '8083:8083' #calibre web
      - '6881:6881/udp'
    volumes:
      - 'gluetun:/gluetun'
    restart: unless-stopped

  qbittorrent:
    image: linuxserver/qbittorrent
    container_name: qbittorrent
    environment:
      - PUID
      - PGID
      - TZ
      - WEBUI_PORT
    volumes:
      - '/docker/appdata/qbittorrent:/config'
      - '/data/torrents:/data/torrents'
    restart: unless-stopped
    network_mode: "service:gluetun"
    depends_on:
      - gluetun

  tautulli:
    image: linuxserver/tautulli
    container_name: tautulli
    environment:
      - PUID
      - PGID
      - TZ
    volumes:
      - '/docker/appdata/tautulli:/config'
    restart: unless-stopped
    network_mode: "service:gluetun"
 
    depends_on:
      - gluetun
  radarr:
    image: linuxserver/radarr
    container_name: radarr
    environment:
      - PUID
      - PGID
      - TZ
    volumes:
      - '/docker/appdata/radarr:/config'
      - '/mnt/network_share/data:/data'
      - '/data/torrents:/data/torrents'
      - '/data/sabnzbd_downloads/complete:/config/Downloads/complete'

    restart: unless-stopped
    network_mode: "service:gluetun"

    depends_on:
      - gluetun
  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID
      - PGID
      - TZ
    volumes:
      - '/docker/appdata/sonarr:/config'
      - '/mnt/network_share/data:/data'
      - '/data/torrents:/data/torrents'
      - '/data/sabnzbd_downloads/complete:/config/Downloads/complete'

    restart: unless-stopped
    network_mode: "service:gluetun"
 
    depends_on:
      - gluetun
  overseerr:
    image: 'lscr.io/linuxserver/overseerr:latest'
    container_name: overseerr
    environment:
      - PUID
      - PGID
      - TZ
    volumes:
      - '/docker/appdata/overseerr:/config'
    restart: unless-stopped
    network_mode: "service:gluetun"

    depends_on:
      - gluetun

  prowlarr:
    image: 'lscr.io/linuxserver/prowlarr:latest'
    container_name: prowlarr
    environment:
      - PUID
      - PGID
      - TZ
    volumes:
      - '/docker/appdata/prowlarr:/config'
    restart: unless-stopped
    network_mode: "service:gluetun"

    depends_on:
      - gluetun

  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    environment:
      - PUID
      - PGID
      - TZ
    volumes:
      - '/docker/appdata/sabnzbd:/config'
      - '/data/sabnzbd_downloads/complete:/config/Downloads/complete'


    restart: unless-stopped
    network_mode: "service:gluetun"

    depends_on:
      - gluetun

  uptime-kuma:
    image: louislam/uptime-kuma:1
    network_mode: host
    restart: always
    ports:
      - "3001:3001"
    volumes:
      - '/docker/appdata/uptime_kuma:/app/data'

  plex:
    image: 'lscr.io/linuxserver/plex:latest'
    container_name: plex
    environment:
      - PUID
      - PGID
      - TZ
      - VERSION
    volumes:
      - '/docker/appdata/plex:/config'
      - '/mnt/network_share/data/media:/data/media'
    restart: unless-stopped
    network_mode: host

  jellyfin:
    image: 'lscr.io/linuxserver/jellyfin:latest'
    container_name: jellyfin
    environment:
      - PUID
      - PGID
      - TZ
    volumes:
      - '/docker/appdata/jellyfin:/config'
      - '/mnt/network_share/data/media:/data/media'
    ports:
      - '8096:8096'
      - '8920:8920'
      - '7359:7359/udp'
      - '1900:1900/udp'
    restart: unless-stopped
    network_mode: host

  channels-dvr:
    image: 'fancybits/channels-dvr:tve'
    container_name: channels-dvr
    network_mode: host
    ports:
      - '8089:8089'
    restart: 'on-failure:10'
    devices:
      - '/dev/dri:/dev/dri'
    volumes:
      - '/docker/appdata/dvr:/channels-dvr'
      - '/mnt/network_share/data/dvr/recordings:/shares/DVR'

  calibre-web-automated:
    image: crocodilestick/calibre-web-automated:latest
    container_name: calibre-web-automated
    environment:
      # Only change these if you know what you're doing
      - PUID
      - PGID
      - TZ
    volumes:
      # CW users migrating should stop their existing CW instance, make a copy of the config folder, and bind that here to carry over all of their user settings ect.
      - '/docker/appdata/calibre_web:/config'

      # This is an ingest dir, NOT a library one. Anything added here will be automatically added to your library according to the settings you have configured in CWA Settings page. All files placed here are REMOVED AFTER PROCESSING
      - '/data/book_ingest:/data/book_ingest'
      # If you don't have an existing library, CWA will automatically create one at the bind provided here
      - '/data/book_downloads:/calibre-library'
    network_mode: "service:gluetun"
    depends_on:
      - gluetun
    restart: unless-stopped

  lazylibrarian:
    image: lscr.io/linuxserver/lazylibrarian:latest
    container_name: lazylibrarian
    environment:
      - PUID
      - PGID
      - TZ
    volumes:
      - '/docker/appdata/lazylibrarian:/config'
      - '/data/book_downloads:/data/book_downloads'
      - '/mnt/network_share/data:/data'
    network_mode: "service:gluetun"
    depends_on:
      - gluetun
    restart: unless-stopped

# Container‑management UI
  yacht:
    image: selfhostedpro/yacht:latest
    container_name: yacht
    ports:
      - "8000:8000"            # Web UI http://<host>:8000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - yacht_data:/config
    networks:
      - coolify                # share external network with other services
    restart: unless-stopped

volumes:
  gluetun: null
  yacht_data:

